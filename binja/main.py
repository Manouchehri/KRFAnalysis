import os
import subprocess
import sys
from shutil import copy
import tarfile
import json
import time

files_set = set()
curdir = os.getcwd()

"""
Example output from the gdb process:
[New LWP 29667]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Core was generated by `find /'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x000055555557455a in ?? ()
0x2055a /usr/bin/find
0x2178c /usr/bin/find
0x21c5f /usr/bin/find
0x818a /usr/bin/find
0x7829 /usr/bin/find
0x21b97 /lib/x86_64-linux-gnu/libc-2.27.so
0x797a /usr/bin/find

So we skip the first four lines, since they are always taken with gdb intro stuff. Next, we search for any line that has two space seperated items on a line, and those match our data.
"""

# Handle an individual file
def analyze(exe, core_file):
    global files_set
    pygdb = curdir + "/gdb.py"
    lines = (
        subprocess.check_output(
            ["gdb", exe, core_file, "-batch", "-ex", "source " + pygdb, "--quiet"]
        )
        .decode("utf-8")
        .split("\n")[4:]
    )

    files = []
    for l in lines:
        a = l.split()
        if len(a) != 2:
            continue
        addr = a[0]
        file = a[1]
        files_set.add(file)
        file = file.split("/")[-1]
        if len(files) == 0 or files[-1]["file"] != file:
            files.append({"file": file, "stack": []})
        files[-1]["stack"].append(addr)

    return files


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage:", sys.argv[0], "<executable> <core_file> <core_file2> ...")
        sys.exit(1)

    binaryname = sys.argv[1].split("/")[-1]
    timestamp = str(time.time())
    dirname = "krfanalysis-" + binaryname + "-" + timestamp

    # Writes to this directory: `pwd`/dirname
    os.makedirs(dirname + "/binaries")
    os.mkdir(dirname + "/cores")

    # Extract information from the core dump
    # And print to distinct files
    for core in sys.argv[2:]:
        gdbdata = analyze(sys.argv[1], core)
        with open(dirname + "/cores/" + core.split("/")[-1] + ".json", "w") as f:
            f.write(json.dumps(gdbdata))

    # Copy binaries:
    for f in files_set:
        copy(f, dirname + "/binaries/" + f.split("/")[-1])

    # Make tarball
    with tarfile.open(dirname + ".tar.gz", "w:gz") as tar:
        tar.add(dirname)
    print("Produced tar archive " + dirname + ".tar.gz in", curdir)
